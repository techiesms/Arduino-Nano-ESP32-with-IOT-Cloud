#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1ff00950-7b48-4205-ad1c-da3936fb10b2

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudDimmedLight fan;
  CloudLight relay1;
  CloudLight relay2;
  CloudLight relay3;
  CloudLight relay4;
  CloudTemperatureSensor temperature;
  CloudRelativeHumidity humidity;
  

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


#include "thingProperties.h"
#include "DHT.h"
#include <IRremote.h>   // https://github.com/Arduino-IRremote/Arduino-IRremote (3.6.1)
#include <AceButton.h>  // https://github.com/bxparks/AceButton (1.9.2)

#define DHTPIN D9
#define DHTTYPE DHT11
#define irPin D11  // IR sensor pin

DHT dht(DHTPIN, DHTTYPE);

using namespace ace_button;

bool DEBUG_SW = 1;

// Pins of Fan Regulator Knob
#define fan_switch A4
#define s1 A3
#define s2 A2
#define s3 A1
#define s4 A0

// Pins of Switches
#define S5 A5
#define S6 A6
#define S7 A7
#define S8 D13

// Pins of Relay (Appliances Control)
#define R5 D2
#define R6 D3
#define R7 D4
#define R8 D5  

// Pins of Relay (Fan Speed Control)
#define Speed1 D6
#define Speed2 D7
#define Speed4 D8

bool speed1_flag = 1;
bool speed2_flag = 1;
bool speed3_flag = 1;
bool speed4_flag = 1;
bool speed0_flag = 1;

int switch_ON_Flag1_previous_I = 0;
int switch_ON_Flag2_previous_I = 0;
int switch_ON_Flag3_previous_I = 0;
int switch_ON_Flag4_previous_I = 0;

int curr_speed = 0;
bool fan_power = 0;

// IR Remote Code for Lights
#define IR_Relay1 0x1FE50AF
#define IR_Relay2 0x1FED827
#define IR_Relay3 0x1FEF807
#define IR_Relay4 0x1FE30CF
#define IR_Relay_All_Off 0x1FE48B7
#define IR_Relay_All_On 0x1FE7887

// IR Remote Code for Fan
#define IR_Speed_Up 0x1FE609F
#define IR_Speed_Dw 0x1FEA05F
#define IR_Fan_off 0x1FE10EF
#define IR_Fan_on 0x1FE906F

IRrecv irrecv(irPin);
decode_results results;

ButtonConfig config1;
AceButton button1(&config1);
ButtonConfig config2;
AceButton button2(&config2);
ButtonConfig config3;
AceButton button3(&config3);
ButtonConfig config4;
AceButton button4(&config4);
ButtonConfig config5;
AceButton button5(&config5);

void handleEvent1(AceButton*, uint8_t, uint8_t);
void handleEvent2(AceButton*, uint8_t, uint8_t);
void handleEvent3(AceButton*, uint8_t, uint8_t);
void handleEvent4(AceButton*, uint8_t, uint8_t);
void handleEvent5(AceButton*, uint8_t, uint8_t);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);

  dht.begin();
  irrecv.enableIRIn();  // Enabling IR sensor

  pinMode(s1, INPUT);
  pinMode(s2, INPUT);
  pinMode(s3, INPUT_PULLUP);
  pinMode(s4, INPUT);
  pinMode(S5, INPUT);
  pinMode(S6, INPUT);
  pinMode(S7, INPUT);
  pinMode(S8, INPUT);

  pinMode(R5, OUTPUT);
  pinMode(R6, OUTPUT);
  pinMode(R7, OUTPUT);
  pinMode(R8, OUTPUT);
  pinMode(Speed1, OUTPUT);
  pinMode(Speed2, OUTPUT);
  pinMode(Speed4, OUTPUT);

  config1.setEventHandler(button1Handler);
  config2.setEventHandler(button2Handler);
  config3.setEventHandler(button3Handler);
  config4.setEventHandler(button4Handler);
  config5.setEventHandler(button5Handler);

  button1.init(S5);
  button2.init(S6);
  button3.init(S7);
  button4.init(S8);
  button5.init(fan_switch);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);



  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {

  ArduinoCloud.update();
  // Your code here
  DHT_SENSOR_READ();
  ir_remote();
  Fan();
  
  button1.check();
  button2.check();
  button3.check();
  button4.check();
  button5.check();
}

void button1Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) 
{
  if (DEBUG_SW) Serial.println("EVENT1");
  switch (eventType) {
    case AceButton::kEventPressed:
      if (DEBUG_SW) Serial.println("kEventPressed");
      relay1 = 1;
      digitalWrite(R5, HIGH);
      break;
    case AceButton::kEventReleased:
      if (DEBUG_SW) Serial.println("kEventReleased");
      relay1 = 0;
      digitalWrite(R5, LOW);
      break;
  }
}

void button2Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) 
{
  if (DEBUG_SW) Serial.println("EVENT2");
  //EspalexaDevice* d2 = espalexa.getDevice(1);
  switch (eventType) {
    case AceButton::kEventPressed:
      if (DEBUG_SW) Serial.println("kEventPressed");
      relay2 = 1;
      digitalWrite(R6, HIGH);
      break;
    case AceButton::kEventReleased:
      if (DEBUG_SW) Serial.println("kEventReleased");
      relay2 = 0;
      digitalWrite(R6, LOW);
      break;
  }
}
void button3Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  if (DEBUG_SW) Serial.println("EVENT3");
  //EspalexaDevice* d3 = espalexa.getDevice(2);
  switch (eventType) {
    case AceButton::kEventPressed:
      if (DEBUG_SW) Serial.println("kEventPressed");
      relay3 = 1;
      digitalWrite(R7, HIGH);
      break;
    case AceButton::kEventReleased:
      if (DEBUG_SW) Serial.println("kEventReleased");
      relay3 = 0;
      digitalWrite(R7, LOW);
      break;
  }
}
void button4Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  if (DEBUG_SW) Serial.println("EVENT4");
  //EspalexaDevice* d4 = espalexa.getDevice(3);
  switch (eventType) {
    case AceButton::kEventPressed:
      if (DEBUG_SW) Serial.println("kEventPressed");
      relay4 = 1;
      digitalWrite(R8, HIGH);
      break;
    case AceButton::kEventReleased:
      if (DEBUG_SW) Serial.println("kEventReleased");
      relay4 = 0;
      digitalWrite(R8, LOW);
      break;
  }
}

void button5Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) 
{
  if (DEBUG_SW) Serial.println("EVENT5");
  switch (eventType) {
    case AceButton::kEventPressed:
      if (DEBUG_SW) Serial.println("kEventPressed");
      if (curr_speed == 0) {
        speed0();
      }
      if (curr_speed == 1) {
        speed1();
      }
      if (curr_speed == 2) {
        speed2();
      }
      if (curr_speed == 3) {
        speed3();
      }
      if (curr_speed == 4) {
        speed4();
      }
      break;
    case AceButton::kEventReleased:
      if (DEBUG_SW) Serial.println("kEventReleased");
      digitalWrite(Speed1, LOW);
      digitalWrite(Speed2, LOW);
      digitalWrite(Speed4, LOW);
      fan.setSwitch(0);
      fan_power = 0;
      delay(100);
      break;
  }
}

void onRelay1Change() {
  digitalWrite(R5, relay1);
  // Do something
}


void onRelay2Change() {
  digitalWrite(R6, relay2);
  // Do something
}


void onRelay3Change() {
  digitalWrite(R7, relay3);
  // Do something
}


void onRelay4Change() {
  digitalWrite(R8, relay4);
  // Do something
}


void onFanChange()
{
  int fan_speed_map = map(fan.getBrightness(), 0, 100, 0, 4);
  if (fan.getSwitch() == 0)
  {
    speed0();
  }

  if (fan.getSwitch() == 1)
  {
    if (fan_speed_map == 0)
      speed0();
    if (fan_speed_map == 1)
      speed1();
    if (fan_speed_map == 2)
      speed2();
    if (fan_speed_map == 3)
      speed3();
    if (fan_speed_map == 4)
      speed4();
  }  // Do something
}


void Fan()
{
  if (digitalRead(fan_switch) == LOW)
  {
    if (digitalRead(s1) == LOW && speed1_flag == 1) {
      speed1();
      speed1_flag = 0;
      speed2_flag = 1;
      speed3_flag = 1;
      speed4_flag = 1;
      speed0_flag = 1;
    }
    if (digitalRead(s2) == LOW && digitalRead(s3) == HIGH && speed2_flag == 1) {
      speed2();
      speed1_flag = 1;
      speed2_flag = 0;
      speed3_flag = 1;
      speed4_flag = 1;
      speed0_flag = 1;
    }
    if (digitalRead(s2) == LOW && digitalRead(s3) == LOW && speed3_flag == 1) {
      speed3();
      speed1_flag = 1;
      speed2_flag = 1;
      speed3_flag = 0;
      speed4_flag = 1;
      speed0_flag = 1;
    }
    if (digitalRead(s4) == LOW && speed4_flag == 1) {
      speed4();
      speed1_flag = 1;
      speed2_flag = 1;
      speed3_flag = 1;
      speed4_flag = 0;
      speed0_flag = 1;
    }
    if (digitalRead(s1) == HIGH && digitalRead(s2) == HIGH && digitalRead(s3) == HIGH && digitalRead(s4) == HIGH && speed0_flag == 1) {
      speed0();
      speed1_flag = 1;
      speed2_flag = 1;
      speed3_flag = 1;
      speed4_flag = 1;
      speed0_flag = 0;
    }
  }
}


//functions for defining of speeds

// Fan Speed Control

void speed0() {
  //All Relays Off - Fan at speed 0
  Serial.println("SPEED 0");
  digitalWrite(Speed1, LOW);
  digitalWrite(Speed2, LOW);
  digitalWrite(Speed4, LOW);
  fan.setSwitch(0);
  fan.setBrightness(0);
  delay(1000);
}

void speed1() {
  //Speed1 Relay On - Fan at speed 1
  Serial.println("SPEED 1");
  digitalWrite(Speed1, LOW);
  digitalWrite(Speed2, LOW);
  digitalWrite(Speed4, LOW);
  fan.setSwitch(1);
  fan.setBrightness(25);
  curr_speed = 1;
  delay(1000);
  digitalWrite(Speed1, HIGH);
}

void speed2() {
  //Speed2 Relay On - Fan at speed 2
  Serial.println("SPEED 2");
  digitalWrite(Speed1, LOW);
  digitalWrite(Speed2, LOW);
  digitalWrite(Speed4, LOW);
  fan.setSwitch(1);
  fan.setBrightness(50);
  curr_speed = 2;
  delay(1000);
  digitalWrite(Speed2, HIGH);
}

void speed3() {
  //Speed1 & Speed2 Relays On - Fan at speed 3
  Serial.println("SPEED 3");
  digitalWrite(Speed1, LOW);
  digitalWrite(Speed2, LOW);
  digitalWrite(Speed4, LOW);
  fan.setSwitch(1);
  fan.setBrightness(75);
  curr_speed = 3;
  delay(1000);
  digitalWrite(Speed1, HIGH);
  digitalWrite(Speed2, HIGH);
}

void speed4() 
{
  //Speed4 Relay On - Fan at speed 4
  Serial.println("SPEED 4");
  digitalWrite(Speed1, LOW);
  digitalWrite(Speed2, LOW);
  digitalWrite(Speed4, LOW);
  fan.setSwitch(1);
  fan.setBrightness(100);
  curr_speed = 4;
  delay(1000);
  digitalWrite(Speed4, HIGH);
}

void DHT_SENSOR_READ() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  humidity = h;
  temperature = t;

  Serial.print("temp = ");
  Serial.println(t);
  Serial.print("Humi = ");
  Serial.println(h);
  //delay(100);
}

void ir_remote()
{
  if (DEBUG_SW) Serial.println("Inside IR REMOTE");
  if (irrecv.decode(&results)) {
    if (DEBUG_SW) Serial.println(results.value, HEX);  //print the HEX code
    switch (results.value) {
      case IR_Relay1:
        switch_ON_Flag1_previous_I = !switch_ON_Flag1_previous_I;
        digitalWrite(R5, switch_ON_Flag1_previous_I);
        if (DEBUG_SW) Serial.println("RELAY1 ON");
        relay1 = switch_ON_Flag1_previous_I;
        delay(100);
        break;
      case IR_Relay2:
        switch_ON_Flag2_previous_I = !switch_ON_Flag2_previous_I;
        digitalWrite(R6, switch_ON_Flag2_previous_I);
        relay2 = switch_ON_Flag2_previous_I;
        delay(100);
        break;
      case IR_Relay3:
        switch_ON_Flag3_previous_I = !switch_ON_Flag3_previous_I;
        digitalWrite(R7, switch_ON_Flag3_previous_I);
        relay3 = switch_ON_Flag3_previous_I;
        delay(100);
        break;
      case IR_Relay4:
        switch_ON_Flag4_previous_I = !switch_ON_Flag4_previous_I;
        digitalWrite(R8, switch_ON_Flag4_previous_I);
        relay4 = switch_ON_Flag4_previous_I;
        delay(100);
        break;
      case IR_Relay_All_Off:
        All_Lights_Off();

        break;
      case IR_Relay_All_On:
        All_Lights_On();

        break;
      case IR_Fan_on:
        fan.setSwitch(1);
        if (curr_speed == 0) {
          speed0();
        } else if (curr_speed == 1) {
          speed1();
          // fan.setBrightness(25);
        } else if (curr_speed == 2) {
          speed2();
        } else if (curr_speed == 3) {
          speed3();
        } else if (curr_speed == 4) {
          speed4();

        } else {
        }
        break;
      case IR_Fan_off:
        fan.setSwitch(0);
        speed0();
        break;
      case IR_Speed_Up:
        if (curr_speed == 1)
        {
          speed2();

        } else if (curr_speed == 2) {
          speed3();

        } else if (curr_speed == 3) {
          speed4();

        } else if (curr_speed == 4) {
          //Do nothing
        }
        else
        {

        }

        break;
      case IR_Speed_Dw:
        if (curr_speed == 1) {
          //Do nothing
        }
        if (curr_speed == 2) {
          speed1();

        }
        if (curr_speed == 3) {
          speed2();

        }
        if (curr_speed == 4) {
          speed3();

        } else {
        }

        break;
      default: break;
    }
    irrecv.resume();
  }
  DEBUG_SW = 0;
}

void All_Lights_Off() {
  switch_ON_Flag1_previous_I = 0;
  digitalWrite(R5, LOW);
  relay1 = 0;


  switch_ON_Flag2_previous_I = 0;
  digitalWrite(R6, LOW);
  relay2 = 0;

  switch_ON_Flag3_previous_I = 0;
  digitalWrite(R7, LOW);
  relay3 = 0;

  switch_ON_Flag4_previous_I = 0;
  digitalWrite(R8, LOW);
  relay4 = 0;
}

void All_Lights_On() {
  switch_ON_Flag1_previous_I = 1;
  digitalWrite(R5, HIGH);
  relay1 = 1;

  switch_ON_Flag2_previous_I = 1;
  digitalWrite(R6, HIGH);
  relay2 = 1;

  switch_ON_Flag3_previous_I = 1;
  digitalWrite(R7, HIGH);
  relay3 = 1;

  switch_ON_Flag4_previous_I = 1;
  digitalWrite(R8, HIGH);
  relay4 = 1;
}
